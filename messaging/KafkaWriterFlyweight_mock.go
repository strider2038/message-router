// Code generated by MockGen. DO NOT EDIT.
// Source: KafkaWriterFlyweight.go

// Package messaging is a generated GoMock package.
package messaging

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKafkaWriterFlyweight is a mock of KafkaWriterFlyweight interface
type MockKafkaWriterFlyweight struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaWriterFlyweightMockRecorder
}

// MockKafkaWriterFlyweightMockRecorder is the mock recorder for MockKafkaWriterFlyweight
type MockKafkaWriterFlyweightMockRecorder struct {
	mock *MockKafkaWriterFlyweight
}

// NewMockKafkaWriterFlyweight creates a new mock instance
func NewMockKafkaWriterFlyweight(ctrl *gomock.Controller) *MockKafkaWriterFlyweight {
	mock := &MockKafkaWriterFlyweight{ctrl: ctrl}
	mock.recorder = &MockKafkaWriterFlyweightMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKafkaWriterFlyweight) EXPECT() *MockKafkaWriterFlyweightMockRecorder {
	return m.recorder
}

// GetWriterForTopic mocks base method
func (m *MockKafkaWriterFlyweight) GetWriterForTopic(topicName string) *KafkaWriter {
	ret := m.ctrl.Call(m, "GetWriterForTopic", topicName)
	ret0, _ := ret[0].(*KafkaWriter)
	return ret0
}

// GetWriterForTopic indicates an expected call of GetWriterForTopic
func (mr *MockKafkaWriterFlyweightMockRecorder) GetWriterForTopic(topicName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWriterForTopic", reflect.TypeOf((*MockKafkaWriterFlyweight)(nil).GetWriterForTopic), topicName)
}

// PoolSize mocks base method
func (m *MockKafkaWriterFlyweight) PoolSize() int {
	ret := m.ctrl.Call(m, "PoolSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// PoolSize indicates an expected call of PoolSize
func (mr *MockKafkaWriterFlyweightMockRecorder) PoolSize() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoolSize", reflect.TypeOf((*MockKafkaWriterFlyweight)(nil).PoolSize))
}
