// Code generated by MockGen. DO NOT EDIT.
// Source: Responder.go

// Package requestHandling is a generated GoMock package.
package requestHandling

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockResponder is a mock of Responder interface
type MockResponder struct {
	ctrl     *gomock.Controller
	recorder *MockResponderMockRecorder
}

// MockResponderMockRecorder is the mock recorder for MockResponder
type MockResponderMockRecorder struct {
	mock *MockResponder
}

// NewMockResponder creates a new mock instance
func NewMockResponder(ctrl *gomock.Controller) *MockResponder {
	mock := &MockResponder{ctrl: ctrl}
	mock.recorder = &MockResponderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResponder) EXPECT() *MockResponderMockRecorder {
	return m.recorder
}

// WriteResponse mocks base method
func (m *MockResponder) WriteResponse(writer http.ResponseWriter, status int, message string) error {
	ret := m.ctrl.Call(m, "WriteResponse", writer, status, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteResponse indicates an expected call of WriteResponse
func (mr *MockResponderMockRecorder) WriteResponse(writer, status, message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteResponse", reflect.TypeOf((*MockResponder)(nil).WriteResponse), writer, status, message)
}
